// Auto-generated file for getUserById
// Do not edit this file manually

import { z } from "zod";
import { fetchClient } from "./src/api/fetchClient";
import { ApiError } from "./src/api/api-error";
import { Result } from "wireflux";

export const GetUserByIdRequestPathSchema = z.object({
  id: z.number()
});

export const GetUserByIdResponse200Schema = z.object({
  id: z.number().optional(),
  name: z.string().optional(),
  email: z.string().optional()
});

export type GetUserByIdRequestPath = z.infer<typeof GetUserByIdRequestPathSchema>;

export type GetUserByIdResponse200 = z.infer<typeof GetUserByIdResponse200Schema>;


/**
 * Get user by ID
 * 
 * @param params - Request parameters
 * @param params.throwOnError - If true, throws ApiError instead of returning it as value
 * @returns Promise<Result<GetUserByIdResponse200>> - Result with data or error
 */
export async function getUserById(params: {
  path: GetUserByIdRequestPath,
  throwOnError?: boolean,
  fetchConfig?: RequestInit
}): Promise<Result<GetUserByIdResponse200>> {
  const { path, throwOnError, fetchConfig } = params;
  
  const url = `/users/${path.id}`
  const finalUrl = url;
  
  const options: RequestInit = {
    method: "GET",
    headers: {
      "Content-Type": "application/json",
      ...fetchConfig?.headers,
    },
    ...fetchConfig,
  };
  
  const result = await fetchClient<GetUserByIdResponse200>(finalUrl, options);
  
  if (result.error) {
    if (throwOnError) {
      throw result.error;
    }
    return {
      data: null,
      error: result.error,
    };
  }
  
  return {
    data: result.data,
    error: null,
  };
}
