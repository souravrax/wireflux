// Auto-generated file for getUsers
// Do not edit this file manually

import { z } from "zod";
import { fetchClient } from "./src/api/fetchClient";
import { ApiError } from "./src/api/api-error";
import { Result } from "wireflux";

export const GetUsersResponse200Schema = z.array(z.object({
  id: z.number().optional(),
  name: z.string().optional(),
  email: z.string().optional()
}));

export type GetUsersResponse200 = z.infer<typeof GetUsersResponse200Schema>;


/**
 * Get all users
 * 
 * @param params - Request parameters
 * @param params.throwOnError - If true, throws ApiError instead of returning it as value
 * @returns Promise<Result<GetUsersResponse200>> - Result with data or error
 */
export async function getUsers(params: { throwOnError?: boolean; fetchConfig?: RequestInit } = {}): Promise<Result<GetUsersResponse200>> {
  const { throwOnError, fetchConfig } = params;
  
  const url = `/users`
  const finalUrl = url;
  
  const options: RequestInit = {
    method: "GET",
    headers: {
      "Content-Type": "application/json",
      ...fetchConfig?.headers,
    },
    ...fetchConfig,
  };
  
  const result = await fetchClient<GetUsersResponse200>(finalUrl, options);
  
  if (result.error) {
    if (throwOnError) {
      throw result.error;
    }
    return {
      data: null,
      error: result.error,
    };
  }
  
  return {
    data: result.data,
    error: null,
  };
}
