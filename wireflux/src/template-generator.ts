import { generateFetchClient } from './fetch-client-generator';
import type { FileTemplate, GenerationContext } from './generation-types';
import {
  generateParameterSchema,
  generateRequestBodySchema,
  generateResponseSchema,
} from './schema-generators';
import type { WirefluxConfig } from './types';

export function generateFileTemplate(
  context: GenerationContext,
  config: WirefluxConfig
): FileTemplate {
  const { operationId, fnName, parameters, requestBody, responses } = context;

  let schemas = '';
  let types = '';

  // Generate parameter schemas
  if (parameters) {
    const pathSchema = generateParameterSchema(parameters, 'path');
    if (pathSchema) {
      schemas += `export const ${fnName}RequestPathSchema = ${pathSchema.schema};\n\n`;
      types += `export type ${fnName}RequestPath = z.infer<typeof ${fnName}RequestPathSchema>;\n\n`;
    }

    const querySchema = generateParameterSchema(parameters, 'query');
    if (querySchema) {
      schemas += `export const ${fnName}RequestQuerySchema = ${querySchema.schema};\n\n`;
      types += `export type ${fnName}RequestQuery = z.infer<typeof ${fnName}RequestQuerySchema>;\n\n`;
    }
  }

  // Generate request body schema
  if (requestBody) {
    const bodySchema = generateRequestBodySchema(requestBody);
    if (bodySchema) {
      schemas += `export const ${fnName}RequestBodySchema = ${bodySchema};\n\n`;
      types += `export type ${fnName}RequestBody = z.infer<typeof ${fnName}RequestBodySchema>;\n\n`;
    }
  }

  // Generate response schemas (success only - errors use shared ApiError)
  if (responses) {
    const { successSchemas } = generateResponseSchema(responses);

    // Generate success response schemas only
    for (const { statusCode, schema } of successSchemas) {
      schemas += `export const ${fnName}Response${statusCode}Schema = ${schema};\n\n`;
      types += `export type ${fnName}Response${statusCode} = z.infer<typeof ${fnName}Response${statusCode}Schema>;\n\n`;
    }

    // Note: Error responses use the shared ApiError class instead of individual schemas
  }

  // Generate fetch client
  const fetchClient = generateFetchClient(context, config);

  return {
    operationId,
    imports: `import { z } from "zod";
import { fetchClient } from "${config.fetchClient}";
import { ApiError } from "${config.apiError}";
import { Result } from "wireflux";`,
    schemas,
    types,
    fetchClient,
  };
}

export function createFileContent(template: FileTemplate): string {
  return `// Auto-generated file for ${template.operationId}
// Do not edit this file manually

${template.imports}

${template.schemas}${template.types}${template.fetchClient}
`;
}

export function createIndexContent(operationIds: string[]): string {
  return `// Auto-generated index file
// Do not edit this file manually

${operationIds.map((op) => `export * from './${op}';`).join('\n')}
`;
}
